shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("plotly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
## 角度をセット
rgl::view3d(-25, 15, 40)
## 最前面に持ってくる
rgl.bringtotop()
## アニメーション関数を作る
.anime = rgl::spin3d(axis=c(0, 1, 0), rpm=15)
## X11で再生
rgl::play3d(.anime)
runApp()
runApp()
runApp()
runApp()
ui <- div(
numericInput(inputId = "num",label = "numericInput",value = 1),
hr(),
selectInput(inputId = "sel" ,label = "selectInput", choices = letters),
hr(),
sliderInput(inputId = "sli", label = "sliderInput",value=100,min=0,max=200),
hr(),
checkboxGroupInput(inputId = "chegrp", label = "checkboxGroupInput", choices = letters[1:3]),
hr(),
checkboxInput(inputId = "che", label = "checkboxInput"),
hr(),
radioButtons(inputId = "rad" ,label = "",choices = letters[1:4]),
hr(),
actionButton(inputId = "act" ,label = "actionButton")
)
server <- function(input=input,output=output){}
shinyApp(ui,server)
runApp()
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server)
#ここでは、1つ前の動画で解説した、
#ui <-
#sidebarLayout(
#　sidebarPanel  =　
#　  sidebarPanel(width = 2, <UI>),
#　mainPanel     =
#　　mainPanel(
#　　　tabsetPanel(
#       　tabPanel(“app1”,<UI>),
#       　tabPanel(“app2”,<UI>)
#     　)
#   　)
#)
#
#となる形のアプリを作成していきます。
#まずは、
#simple_app1_finalとsimple_app2_final
#のUI部分を見比べてみましょう
# file.edit("simple_app1_final.R")
# file.edit("simple_app2_final.R")
#APP1 | APP2
#xxxxxxxxxxx
#   comb     レイアウトで以後説明
#
#まずUI componentという部分を見てみましょう。
#     App1       |    App2
# ui_prefecture  | ui_prefecture
# ui_type        | ui_type
# ui_nendo       | ui_nendo
# ui_age         |
# ui_gender      | ui_gender
# ui_kubun       | ui_kubun
#
#二つのアプリで入力用のUIは、ほぼ共通しています。
#なので、ui_ageだけ、app2では不用ですが
#ここではシンプルにするため、app1の入力を
#二つのアプリで使いまわす形にしましょう。
#なので、app1_finalの32行目、入力用のUIを書いている部分を
#sidebarPanelの中に入れてあげましょう。
{
library(shiny)
library(readr)
library(magrittr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
library(rlang)
library(scales)
library(sf)
library(shinycssloaders)
#選択肢データの読み込み--------------
choices <- read_rds("appdata/choices.rds")
#UI components -------------------------
ui_prefecture <- selectInput("pref","都道府県",choices = choices$pref)
ui_type       <- selectInput("type","検査種類",choices = choices$type)
ui_nendo      <- sliderInput("nendo","年度",min   = min(choices$nendo),
max   = max(choices$nendo),
value = c(min(choices$nendo),max(choices$nendo)),
sep   = "")
ui_age        <- selectInput("age","年齢",choices = choices$age)
ui_gender     <- selectInput("gender","性別",choices = c("男","女"))
ui_kubun      <- selectInput("kubun","区分",choices = "検査種類を選択してください")
}#ui components from app1
library(shiny)
ui <- fluidPage(
radioButtons(inputId = "exactTest", label = "正確性検定を実施しますか？",
choices = c("YES" = "1",
"NO" = "0"),
selected = "0"),
br(), hr(),
tableOutput("result.T")
)
server <- function(input, output) {
# generate data
set.seed(12345)
x0 = rnorm(100 , 0, 1) # 平均0、SD=1の正規乱数を100個作成
y0 = rnorm(100 , 0, 10)
# output table
output$result.T  = renderTable({
res = wilcox.test(x0, y0, exact = as.logical(as.numeric(input$exactTest)))
tab = data.frame(res$statistic, res$p.value)
colnames(tab) = c("統計量","p値")
rownames(tab) = "Values"
return(tab)
}, digits = 6)
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
USArrests
View(iris)
USArrests[,1]
USArrests[,0]
USArrests[,0]
rock
USArrests[,0]
attitude[1,]
PlantGrowth
runApp()
runApp()
DNase[2:3]
runApp()
DNase=data.frame("DNase"= DNase)
compiled_DNase<-DNase[2:3]
pca <-prcomp(compiled_DNase,scale=FALSE)
pca3d(pca,
group = DNase[,1],
show.ellipses=TRUE,
ellipse.ci=0.9,
show.plane=TRUE,
fancy= FALSE)
runApp()
crimtab
CO2
esoph
npk
OrchardSprays
LifeCycleSavings
airquality
quakes
LifeCycleSavings
freeny
beaver1
stackloss
morley
quakes
airquality
anscombe
mtcars
USJudgeRatings
swiss
BOD
longley
attitude
anscombe
airquality
quakes
LifeCycleSavings
freeny
anscombe
mtcars
USJudgeRatings
npk
attenu
iris
infert
crimtab
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shinyUI(fluidPage(
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "style.css")),
h1("Principal Component Analysis"),
h2("~iris version~"),
checkboxInput(inputId = "",
label = "からだにいいもの",
value = FALSE),
checkboxInput(inputId = "checkboxInput",
label = "からだにいいもの",
value = FALSE),
checkboxInput(inputId = "checkboxInput",
label = "からだにいいもの",
value = FALSE),
checkboxInput(inputId = "checkboxInput",
label = "からだにいいもの",
value = FALSE),
#radioButtons(inputId = "radio" ,label = "",choices = c("fancy", "DNase", "Good Morning")),
div(
plotOutput("plot2d")
)
))
runApp()
iris=data.frame("iris"= iris)
compiled_iris<-iris[1:4]
pca <-prcomp(compiled_iris, scale=FALSE)
pca2d(pca,
group = iris[,5],
show.ellipses = TRUE,
#変更ポイント
ellipse.ci = 1,
show.plane = TRUE,
#変更ポイント
fancy = TRUE,
#変更ポイント
bg = "lightyellow",
#単一色になる
col = NULL,
#cex value
#0.750, 0.875, 1, 1.17, 1.33, 1.50, 1.67, 1.83, 2.00, 2.33
radius = 0.750,
#topleft, topright, bottomleft, bottomright
legend = "topleft"
)
library(shiny)
library(rgl)
library(pca3d)
iris=data.frame("iris"= iris)
compiled_iris<-iris[1:4]
pca <-prcomp(compiled_iris, scale=FALSE)
pca2d(pca,
group = iris[,5],
show.ellipses = TRUE,
#変更ポイント
ellipse.ci = 1,
show.plane = TRUE,
#変更ポイント
fancy = TRUE,
#変更ポイント
bg = "lightyellow",
#単一色になる
col = NULL,
#cex value
#0.750, 0.875, 1, 1.17, 1.33, 1.50, 1.67, 1.83, 2.00, 2.33
radius = 0.750,
#topleft, topright, bottomleft, bottomright
legend = "topleft"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(pca2d)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tags
list(tags)
help(tags)
list[tags]
tags
runApp()
install_github("vqv/ggbiplot")
library(devtools)
install_github("vqv/ggbiplot")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
help(ggbiplot)
runApp()
runApp()
runApp()
help(plotOutput)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
306*0.3
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(div)
help(div)
help(tags$div)
help("div")
div(
id="div-graph",
plotOutput("plot2d_2")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
