shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
A=read.csv("C:/Users/admin/Desktop/PCA3D/zentai.csv")
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
install.packages("rJava")
install.packages("ReporteRsjars")
install.packages("DT")
install.packages("ReporteRs")
install.packages("officer")
install.packages("rJava")
install.packages("officer")
require(rJava)
.jinit()
#> [1] 0
.jcall('java.lang.System','S','getProperty','java.version')
#> [1] "1.8.0_172"
runApp()
runApp(app.R)
runApp(app.R)
runApp()
library(shiny)
library(officer)
library(flextable)
install.packages(#flextable)
output$data <- renderTable({
my_table
})
output$download_powerpoint <- downloadHandler(
install.packages("flextable")
install.packages("dplyr")
install.packages("dplyr")
library(shiny)
library(shiny)
my_table <- data.frame(
Name = letters[1:4],
Age = seq(20, 26, 2),
Occupation = LETTERS[15:18],
Income = c(50000, 20000, 30000, 45000)
)
ui <- fluidRow(
column(
width = 12,
align = "center",
tableOutput("data"),
br(),
downloadButton("download_powerpoint", "Download Data to PowerPoint")
)
)
library(shiny)
library(officer)
library(flextable)
library(dplyr)
install.packages("dplyr")
library(officer)
library(flextable)
library(dplyr)
my_table <- data.frame(
Name = letters[1:4],
Age = seq(20, 26, 2),
Occupation = LETTERS[15:18],
Income = c(50000, 20000, 30000, 45000)
)
ui <- fluidRow(
column(
width = 12,
align = "center",
tableOutput("data"),
br(),
downloadButton("download_powerpoint", "Download Data to PowerPoint")
)
)
library(shiny)
install.packages("highcharter")
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rgl)
library(pca3d)
A=read.csv("C:/Users/admin/Desktop/pca3D/zentai.csv")
A=data.frame("A"=A)
compiled_A<-A[2:7]
pca <-prcomp(compiled_A,scale=FALSE)
pca2d(pca,
group = A[,1],
show.ellipses=TRUE,
ellipse.ci=0.9,
show.plane=TRUE,
fancy= TRUE)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
downloadButton('downloadPlot2', label = 'Download PCA graph 2')
downloadButton()
textInput("component4",label=h3("component4"))
textInput(id = "AAA","component4",label=h3("component4"))
textInput("component4",label=h3("component4"))
textInput("component4",label=h3(id="AA","component4"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
